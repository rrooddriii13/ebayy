  
Para implementar la funcionalidad de inicio de sesión mediante Google y Facebook en tu aplicación de eBay, se deben crear endpoints en el servidor y funciones en el archivo restService que interactúen con esos endpoints. A continuación, te muestro cómo hacerlo:

1. Modificaciones en server.js
Vamos a añadir dos nuevos endpoints: uno para iniciar sesión con Google y otro para Facebook. La lógica de autenticación dependerá de las respectivas API de cada servicio. Aquí hay un ejemplo básico para cada uno:

javascript
Copiar código
// Agregar al inicio de tu archivo server.js las dependencias necesarias
const { OAuth2Client } = require('google-auth-library'); // Para Google
const fetch = require('node-fetch'); // Para hacer solicitudes HTTP

// Crear cliente para Google
const googleClient = new OAuth2Client(process.env.GOOGLE_CLIENT_ID); // Asegúrate de tener tu CLIENT_ID en el .env

// Endpoint para inicio de sesión con Google
miServidorWeb.post('/api/zonaCliente/LoginGoogle', async function(req, res) {
    const { idToken } = req.body; // Recibe el token de Google desde el cliente

    try {
        const ticket = await googleClient.verifyIdToken({
            idToken,
            audience: process.env.GOOGLE_CLIENT_ID, // Especifica tu CLIENT_ID
        });
        const payload = ticket.getPayload(); // Cargar los datos del usuario desde el ticket

        // Aquí puedes buscar el usuario en la base de datos y proceder a autenticarlo
        const email = payload.email;
        const cuenta = await clienteMongoDB.db(process.env.DB_MONGODB).collection('cuentas').findOne({ email });

        if (!cuenta) {
            return res.status(404).json({ codigo: 1, mensaje: 'Email no encontrado' });
        }

        // Generar JWT y devolver respuesta
        const _jwt = jsonwebtoken.sign(
            { email: cuenta.email, _id: cuenta._id },
            process.env.JWT_SECRETKEY,
            { expiresIn: '5m', issuer: 'http://localhost:3003' }
        );

        res.status(200).json({ codigo: 0, mensaje: 'Inicio de sesión exitoso', token: _jwt });
    } catch (error) {
        console.error('Error en el inicio de sesión con Google:', error);
        res.status(500).json({ codigo: 2, mensaje: 'Error en la autenticación con Google' });
    }
});

// Endpoint para inicio de sesión con Facebook
miServidorWeb.post('/api/zonaCliente/LoginFacebook', async function(req, res) {
    const { accessToken } = req.body; // Recibe el token de Facebook desde el cliente

    try {
        // Verificar el token de acceso con Facebook
        const response = await fetch(`https://graph.facebook.com/me?access_token=${accessToken}&fields=id,name,email`);
        const user = await response.json();

        if (!user.email) {
            return res.status(400).json({ codigo: 1, mensaje: 'Email no encontrado en Facebook' });
        }

        // Busca al usuario en tu base de datos
        const cuenta = await clienteMongoDB.db(process.env.DB_MONGODB).collection('cuentas').findOne({ email: user.email });

        if (!cuenta) {
            return res.status(404).json({ codigo: 1, mensaje: 'Email no encontrado' });
        }

        // Generar JWT y devolver respuesta
        const _jwt = jsonwebtoken.sign(
            { email: cuenta.email, _id: cuenta._id },
            process.env.JWT_SECRETKEY,
            { expiresIn: '5m', issuer: 'http://localhost:3003' }
        );

        res.status(200).json({ codigo: 0, mensaje: 'Inicio de sesión exitoso', token: _jwt });
    } catch (error) {
        console.error('Error en el inicio de sesión con Facebook:', error);
        res.status(500).json({ codigo: 2, mensaje: 'Error en la autenticación con Facebook' });
    }
});
2. Modificaciones en restService.js
Ahora, en el archivo restService, vamos a crear funciones que interactúen con los nuevos endpoints:

javascript
Copiar código
let restService = {
    ComprobarPassword: function(email, password) {
        return fetch('http://localhost:3003/api/zonaCliente/ComprobarPassword', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
        });
    },
    LoginGoogle: function(idToken) {
        return fetch('http://localhost:3003/api/zonaCliente/LoginGoogle', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ idToken }), // Envío del token de Google
        });
    },
    LoginFacebook: function(accessToken) {
        return fetch('http://localhost:3003/api/zonaCliente/LoginFacebook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ accessToken }), // Envío del token de Facebook
        });
    }
};

export default restService;
3. Modificaciones en el Componente Login.js
Por último, vamos a modificar el componente Login para manejar los inicios de sesión con Google y Facebook:

javascript
Copiar código
import './Login.css';
import { useState } from 'react';
import restService from '../../../servicios/restService';
import LoginForm from './LoginForm';
import PasswordForm from './PasswordForm';

// Importar las bibliotecas necesarias para Google y Facebook
import { GoogleLogin } from 'react-google-login';
import FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';

function Login() {
    const [emailUser, setEmailUser] = useState('');
    const [emailValido, setEmailValido] = useState(false);
    const [passwordUser, setPasswordUser] = useState('');

    async function HandlerClickBoton(ev) {
        let _nombreBoton = ev.target.name;

        switch (_nombreBoton) {
            case 'Continuar':
                // Lógica para comprobar el email (como antes)
                break;

            case 'Identifícate':
                // Lógica para comprobar la contraseña (como antes)
                break;

            case 'google':
                // Lógica para el inicio de sesión con Google
                break;

            case 'facebook':
                // Lógica para el inicio de sesión con Facebook
                break;

            default:
                break;
        }
    }

    const responseGoogle = async (response) => {
        const idToken = response.tokenId; // Obtén el token de Google
        const _respuestaLogin = await restService.LoginGoogle(idToken);
        const _bodyLogin = await _respuestaLogin.json();

        if (_bodyLogin.codigo === 0) {
            console.log('Inicio de sesión con Google exitoso.', _bodyLogin.token);
            // Manejar el token como sea necesario
        } else {
            console.log('Error en el inicio de sesión con Google:', _bodyLogin.mensaje);
        }
    };

    const responseFacebook = async (response) => {
        const accessToken = response.accessToken; // Obtén el token de Facebook
        const _respuestaLogin = await restService.LoginFacebook(accessToken);
        const _bodyLogin = await _respuestaLogin.json();

        if (_bodyLogin.codigo === 0) {
            console.log('Inicio de sesión con Facebook exitoso.', _bodyLogin.token);
            // Manejar el token como sea necesario
        } else {
            console.log('Error en el inicio de sesión con Facebook:', _bodyLogin.mensaje);
        }
    };

    return (
        <div className='container-fluid'>
            <div className='row mt-4'>
                <a href="/Tienda/Productos"><img src='/images/logo_ebay.png' alt='loge Ebay' /></a>
            </div>
            {
                !emailValido ? (
                    <LoginForm emailUser={emailUser} setEmailUser={setEmailUser} HandlerClickBoton={HandlerClickBoton} />
                ) : (
                    <PasswordForm emailUser={emailUser} setPasswordUser={setPasswordUser} HandlerClickBoton={HandlerClickBoton} />
                )
            }
            <GoogleLogin
                clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}
                buttonText="Iniciar sesión con Google"
                onSuccess={responseGoogle}
                onFailure={responseGoogle}
                cookiePolicy={'single_host_origin'}
            />
            <FacebookLogin
                appId={process.env.REACT_APP_FACEBOOK_APP_ID}
                autoLoad={false}
                fields="name,email,picture"
                callback={responseFacebook}
                render={renderProps => (
                    <button onClick={renderProps.onClick}>Iniciar sesión con Facebook</button>
                )}
            />
        </div>
    );
}

export default Login;