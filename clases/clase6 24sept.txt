 
 ---------------------------------------------------
	arquitectura aplicación
 ----------------------------------------------------

       |-------------------------------------------------en nuestra maquina ----------------------------------------------------|

	FRONT		  servicios_react	BACK				SERVIDOR BD
	clientes 		||					 	mongodb-> almacenamiento datos perrsistente ej.> productos,usuarios
	navegadores ------------------------>   servidor			(local o en la nube)
	SPA-React <------------------------	NODEJS   
	 miEbay 				(servicios REST) --------------->almacenamiento/recup. datos JSON
								<------------------

										 SERVIDOR BD 
								redis Para datos temporales de alta velocidad-> abajo
								almacenamiento/recup datos inmediatos(ram) como datos de sesión usuario

 Front : usuario interectuar-> maneja la interfaz con la que los usuarios interactúan.
 Servicios de React: Punto de enlace entre frontend y backend.Hace la comunicacion entre la app react con la app (back y front)
 Back: lo q corre por detras es decir aquello q va a recibir los datos x parte de los clientes

 ahora vamos a pasar datos al back dejamos de lado demomento a front
 me llegan del clientes estos dtaos con este formato -> validarlos nunca fiarme -< y mandarlo ala bbdd 
 y si va todo correcto se envio bn  mandar uyna r4espuesta al cliente de front

 ====================================
 1. ¿Qué es AJAX?
 AJAX (Asynchronous JavaScript and XML) es una técnica que permite a las aplicaciones web enviar y recibir datos del servidor
 sin tener que recargar toda la página. Esto se traduce en una experiencia de usuario más fluida y rápida. Aunque el término 
 menciona XML, hoy en día se usa más comúnmente JSON para intercambiar datos.
---------------------------------------------------------------------------------------------------------------------
 como mandar datos desde js al backend (servidor)
      AJAX
		http-request GET,POST	servidor backend nodejs
 cliente ----------------------------> servicio REST (devuelve datos en formato JSON en http-response)
	 <--------------------------- servicio REST -> es un programita q esta ejecutando en lado de back q como respuesta siempre datos tipo JSON
		http-response

 la cabecera http-request, ContentType establece el tipo de datos 
 que va en el body http-request (como se mandan los datos):

 si no pones nada y mandas datos desde un form cliente a un servidor backen ese dato se manda x defecto SIEMPRE

 applications/x-www-form-urlencoded (por defecto el q usan los form) ===>datos en  formato variable/clave=valor, variable=valor,...
 application/json ====================> los datos se mandan en formato json: {prop:valor, prop,valor, ...}
 multipart/formdata ==================> x-www-form-urlencoded donde varios puedes mandar (contenido binario) fichero (como imágenes,pdfs...)
 ...
 ----------------------------------------------------------------------
 Forma q tengo para enviar datos desde el cliente a mi servidor es usando AJAX
 FORMAS de mandar datos usando AJAX:
 
 en  el submit del form del registro cuando ya tengo validados los datos de mi variable de state los tengo q mandar al servidor de NODE

 1º forma usando el objeto XMLHttpRequest(XHR) ->forma mas primitiva
	- a) nos creamos un objeto XMLHttpRequest:
			
			let _petAjax=new XMLHttpRequest();
	
	- b) usando el método .open() del objto, abrimos conexión (socket) hacia el servidor usando la url y método http que definas:
				
		_petAjax.open('GET' | 'POST', 'http://localhost:3000/api/zonaCliente/Registro') 1arg post o get y 2 url donde vas a quere mandar datos al servidor
	
		usando el método .send(...) mando los datos al servidor; en el argumento del método .send, van los datos:
			
			Antes de enviar la solicitud hay q crear la cabecera.setRequestHeader('cabecera', valor)
			que en cabecera para indicar el tipo de contenido - es con 'Content-Type' , aqui el tipo  ' application/json'

			GET ---> en el body del http-request no van los datos, van en la url, entonces: _petAjax.send(null)
			POST --> en el body del http-request si van los datos en funcion de la cabecera que pongas en el content-type
				 usando método .setRequestHeader('cabecera', valor)
			

                 	ej: mando texto plano...
			 _petAjax.setRequestHeader('Content-Type','text/plain');
			 _petAjax.send('hola como estas)

			ej: mando en json... -> 1 establecer cabeceras 
			 _petAjax.setRequestHeader('Content-Type','application/json');
			 _petAjax.send ( {nombre:'...', apellidos:'...', edad:35} )
			                 ----------------------------------------
					  en navegadores antiguis en vez de coigerte el obj te lo sustituye ala clase q pertenecve el obj [Object object]
			                 \--> [Object object]
					 si da este problema, serializar el json (convertirlo en un STRING)
					 JSON.stringify( {...} )	
			                 y en el servidor, deserializas:
  			                 JSON.parse(...)

          el cod JS es single fred solo hay un hilo  es decir ejecuta instruccion,ejecuta instruccion,ejecuta instruccion
	  dsi tu haces llamada a un servidor llama al servidor y espera eso es una putada xq se (queda pillado) para 
	  para  evitar el single fred la ejecucion mono hilo se invento funciones y eventos callbackluego promeesas

 
	- c) se recomienda hacerlo antes del .send() el definir la función callback de llamada cuando se completa la pet.ajax al servidor
	     ¿Cómo sabe el single-thread de js q la pet.ajax ha finalizado? el objeto XMLHttpRequest tiene un evento, llamado "readystatechange"
		la propiedad .readyState controla los valores de este evento
			
		0	UNSENT	Client has been created. open() not called yet. la aplicacion ajax se abierto el socket pero no envio ningun tipo de datos 
		1	OPENED	open() has been called. ->  se acaba de abrir (open() ha sido llamado)
		2	HEADERS_RECEIVED send() has been called, and headers and status are available.-> las cabeceraas estas establecidas
		3	LOADING	Downloading; responseText holds partial data. -> se mando datos al servidor y el servidor lo esta procesando
		4	DONE	The operation is complete. <================= el servidor ha completado el procesamiento de los datos
									       y te ha mandado respuesta

	entonces, en la fun manejadora del evento  tengo q comporobar si la propiedad readyState vale 4 o no  
        creamos un handler para el evento readystatechange  buscando la propiedad readyState sea 4
			
			//readystatechange xq añado sobre el obj _petAjax  el evento q quiero escuchar , la funcion landa q quiero escuchar
			_petAjax.addEventListener('readystatechange',(ev) => {
					if (_petAjax.readyState == 4) { //si es 4  q ya tengo respuesta
						//ya tengo respuesta del server, la leo...
					}
			} )

		para leer respuesta del server usamos propiedades .responseText y .responseXML del objeto XMLHttpResquest:

			.responseXML ----> recibes la respuesta del server formato XML (servicios SOAP viejunos)
			.responseText ---> recibes respuesta del server en formato JSON, texto, ... 

			_petAjax.addEventListener('readystatechange',(ev) => {
					if (_petAjax.readyState == 4) {
						//ya tengo respuesta del server, la leo...
						let _respuestaServer=JSON.parse(_petAjax..responseText );
							...
					}
			} )


 resumen  ->  los PASOS A SEGUIR :
 creo obj ,abroo conexion estableciendo metodo URL 
 antes de mandar los datos establezco cabecera con el formato de los datos,
 antes de mandar los datos un manejador de evento readystatechange  , y func landa
 bbusco condicion para q readyState sea 4  para q reciba respuesta DEL SERVER dentro del if leo la respuesta del server
 una vez defina el handler mando los datos con el formato que puesto lo ultimo es el SEND



 JSON.parse() -> Convierte una cadena JSON en un objeto JavaScript.-> String a obj
 ej->let jsonResponse = '{"success": true, "message": "Registro exitoso."}';
 let responseObject = JSON.parse(jsonResponse);
 console.log(responseObject.success); // true


 JSON.stringify()->Convierte un objeto JavaScript en una cadena JSON. -> Obj a strign
 const persona = {
    nombre: "Juan",
    edad: 30,
    ciudad: "Madrid"
 };

 // Convertir el objeto a una cadena JSON
 const jsonString = JSON.stringify(persona);
 console.log(jsonString); // '{"nombre":"Juan","edad":30,"ciudad":"Madrid"}'


 ---------------
 TE VAS A servicios Y CREAS restService.js
 
 2º forma usando la FETCH-api

 3º forma usando paquetes externos, como AXIOS




estaba haciendo ejercicios en esta web de react y node, y tiene todo un 'path' que reune full-stack javascript, abajo tiene react, node...

https://www.theodinproject.com/paths/full-stack-javascript

instalaar monggobb y compost 